// Generated by LiveScript 1.6.0
var caldis, ldcaret;
caldis = {
  vertical: function(x, y, box){
    var tx, ty;
    tx = box.x + box.width / 2;
    ty = box.y + box.height / 2;
    return Math.pow(tx - x, 2) + 10000 * Math.pow(ty - y, 2);
  },
  euclidean: function(x, y, box){
    var tx, ty;
    tx = box.x + box.width / 2;
    ty = box.y + box.height / 2;
    return Math.pow(tx - x, 2) + Math.pow(ty - y, 2);
  }
};
ldcaret = {
  get: function(){
    var sel, range, obj, n, ref$;
    sel = window.getSelection();
    if (!sel.rangeCount) {
      return {};
    }
    range = sel.getRangeAt(0);
    obj = {
      ns: range.startContainer,
      ne: range.endContainer,
      os: range.startOffset,
      oe: range.endOffset
    };
    n = obj.ns.childNodes[obj.os];
    if (n && ((ref$ = n.nodeName) === 'TEXTAREA' || ref$ === 'INPUT')) {
      obj = {
        ns: n,
        ne: n,
        os: n.selectionStart,
        oe: n.selectionEnd
      };
    }
    return obj;
  },
  set: function(opt, edit){
    var ns, os, ne, oe, range, newRange, n, o, _, ref$, selection;
    opt == null && (opt = {});
    edit == null && (edit = false);
    if (opt.ns != null) {
      ns = opt.ns, os = opt.os, ne = opt.ne, oe = opt.oe;
      if (ns.setSelectionRange) {
        ns.focus();
        return ns.setSelectionRange(os, oe != null ? oe : os);
      }
      range = document.createRange();
      range.setStart(ns, os);
      range.setEnd(ne != null ? ne : ns, oe != null ? oe : os);
    } else if (opt.startContainer) {
      range = opt;
    }
    if (edit) {
      newRange = document.createRange();
      n = range.startContainer;
      o = range.startOffset;
      if (range.startContainer.nodeType !== Element.TEXT_NODE) {
        _ = function(n, o){
          var ret, that;
          if (!n || !n.childNodes) {
            return n;
          }
          ret = _(n.childNodes[o], 0);
          return (that = ret) ? that : n;
        };
        ref$ = [_(n, o), 0], n = ref$[0], o = ref$[1];
      }
      newRange.setStart(n, o);
      newRange.setEnd(n, o);
      range = newRange;
    }
    selection = window.getSelection();
    selection.removeAllRanges();
    return selection.addRange(range);
  },
  clear: function(){
    var selection;
    selection = window.getSelection();
    return selection.removeAllRanges();
  },
  getBoundingBox: function(){
    var range;
    range = window.getSelection().getRangeAt(0);
    return range.getBoundingClientRect();
  },
  setContent: function(n){
    return this.insert(n);
  },
  insert: function(n){
    var obj, range;
    if (typeof n === 'string') {
      obj = ldcaret.get();
      if (!(obj && obj.ns)) {
        return;
      }
      if (obj.ns.setRangeText) {
        return obj.ns.setRangeText(n);
      }
      n = document.createTextNode(n);
    }
    range = window.getSelection().getRangeAt(0);
    range.deleteContents();
    return range.insertNode(n);
  },
  getContent: function(opt){
    var text, range;
    if (!opt) {
      return text = window.getSelection().toString();
    }
    range = document.createRange();
    range.setStart(opt.ns, opt.os);
    range.setEnd(opt.ne, opt.oe);
    return range.toString();
  },
  byPtr: function(arg$){
    var node, x, y, range, method, ret, box;
    node = arg$.node, x = arg$.x, y = arg$.y, range = arg$.range, method = arg$.method;
    ret = ldcaret._byPtr({
      node: node,
      x: x,
      y: y,
      range: range,
      method: method
    });
    box = ret.range.getBoundingClientRect();
    ret.box = box;
    return ret;
  },
  _byPtr: function(arg$){
    var node, x, y, range, method, min, i$, to$, i, r, p, c, box, dist;
    node = arg$.node, x = arg$.x, y = arg$.y, range = arg$.range, method = arg$.method;
    if (!range) {
      range = document.createRange();
    }
    if (node.nodeType === Element.TEXT_NODE) {
      return ldcaret._byPtrInText({
        node: node,
        x: x,
        y: y,
        range: range,
        method: method
      });
    }
    min = null;
    for (i$ = 0, to$ = node.childNodes.length; i$ < to$; ++i$) {
      i = i$;
      r = ldcaret._byPtr({
        node: node.childNodes[i],
        x: x,
        y: y,
        range: range,
        method: method
      });
      if (!min || r.min < min.min) {
        min = r;
      }
    }
    if (!min) {
      p = node.parentNode;
      c = Array.from(p.childNodes);
      range = document.createRange();
      range.setStart(p, c.indexOf(node));
      range.setEnd(p, c.indexOf(node) + 1);
      box = range.getBoundingClientRect();
      dist = caldis[method || 'vertical'](x, y, box);
      min = {
        min: dist,
        range: range
      };
    }
    return min;
  },
  _byPtrInText: function(arg$){
    var node, x, y, method, range, i$, to$, i, box, dist, ref$, idx, min;
    node = arg$.node, x = arg$.x, y = arg$.y, method = arg$.method;
    range = document.createRange();
    for (i$ = 0, to$ = node.length + 1; i$ < to$; ++i$) {
      i = i$;
      range.setStart(node, i);
      box = range.getBoundingClientRect();
      dist = caldis[method || 'vertical'](x, y, box);
      if (!(typeof min != 'undefined' && min !== null) || dist < min) {
        ref$ = [i, dist], idx = ref$[0], min = ref$[1];
      }
    }
    range.setStart(node, idx);
    range.setEnd(node, idx);
    return {
      min: min,
      range: range
    };
  }
};
if (typeof module != 'undefined' && module !== null) {
  module.exports = ldcaret;
} else if (typeof window != 'undefined' && window !== null) {
  window.ldcaret = ldcaret;
}
